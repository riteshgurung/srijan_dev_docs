{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Srijan Developer Doc.\n\n\nThis document contains guidelines for developers. It contains guidelines for Git Workflow, setting up local development\nstacks, coding best practices. Ideally it would contain all the best practices which we follow in Srijan.\n\n\nCollaboration\n\n\nThis document is an collaborative effort initially started by Srijan Developers and built using \nMkDocs\n and code is hosted on\n\nGithub\n. Some of the dev guidelines in the doc has links to external blogs which we always make sure\nto give credit to. In case you feel this document can be made better, please feel free to raise a pull request.\n\n\nUpdate\n\n\nWe have made the \nrepository\n public on 17th August 2016.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-srijan-developer-doc", 
            "text": "This document contains guidelines for developers. It contains guidelines for Git Workflow, setting up local development\nstacks, coding best practices. Ideally it would contain all the best practices which we follow in Srijan.", 
            "title": "Welcome to Srijan Developer Doc."
        }, 
        {
            "location": "/#collaboration", 
            "text": "This document is an collaborative effort initially started by Srijan Developers and built using  MkDocs  and code is hosted on Github . Some of the dev guidelines in the doc has links to external blogs which we always make sure\nto give credit to. In case you feel this document can be made better, please feel free to raise a pull request.", 
            "title": "Collaboration"
        }, 
        {
            "location": "/#update", 
            "text": "We have made the  repository  public on 17th August 2016.", 
            "title": "Update"
        }, 
        {
            "location": "/git/", 
            "text": "Git Workflow\n\n\nIntroduction\n\n\nThis document highlights Git workflow which team at Srijan should use. It also contains conventions for naming\nbranches and remotes. We will introduce two workflows in this document. It is suggested to use the Workflow 1\n(Github's fork based workflow) unless there is a special need to use Workflow 2.\n\n\nBranch name conventions\n\n\nBoth the workflow would follow per feature branch branching concept, so it is crucial to follow a similar branching\nname convention.\n\n\nIt is assumed that your project uses some ticketing tool(Jira etc) to run sprints and each team member is assigned\ntickets in the sprint to develop/fix. Since we would be following per feature branch which should follow following\nnaming convetion and please use lowercase to name your feature branches.\n\n\nticket-number\n-\ndescription-of-the-ticket\n\n\n\n\n\nExample\n\n\n\n\nTicket no. Assigned: Dev-123\n\n\nUser story: As an authenticated user I should be able to view my organization's logo instead of site logo when I\nnavigate to my organization page.\n\n\n\n\nConsidering the above example the branch name could be\n\n\ndev-123-logo-authenticated-users-for-org\n\n\n\n\nGit commit messages\n\n\n\n\nStart your git commit message with the ticket number of the feature you are working. Example ```Dev-123: added template\nfor logo\"\n\n\nGit commit messages should highlight the work which you are saving in that particular commit. Please avoid generic\ncommit messages like \"added css\"\n\n\nGit commit messages should not contain any typos\n\n\nUse \ngit commit --amend\n in case you want to add/modify something to your last commit\n\n\nRefer\n for more\n\n\nIn case your commit message does not follow above points it is likely that the pull request might get rejected and you\nmight have to make changes in your commit messages. Please read \nthis\n\nto understand the process of changing git commit messages\n\n\n\n\nGit Workflows\n\n\nGit Workflow 1\n\n\nArchitecture\n\n\n\n\nEach project would have an upstream repository hosted on Srijan account.\n\n\nhttps://github.com/srijanaravali/srijan_dev_docs\n is an example of upstream remote which we would be using as an example in this document.\n\n\n\n\nSteps\n\n\n\n\nCreate a fork\n\n\n\nThis would create(clone) the upstream repo to your personal github account\n\n\n\nClone the forked repo \ngit clone git@github.com:AshishThakur/srijan_dev_docs.git\n\n\nAdd upstream repo as a new remote named upstream \ngit remote add upstream git@github.com:srijanaravali/srijan_dev_docs.git\n\n\nIt is important to follow similar conventions; while you clone your repo needs to be named as \norigin\n and the srijan repo needs\nto be added a new remote named \nupstream\n. In case you have confusions regarding remote, please read about how remotes work in git.\n\n\nIn case you have correctly followed the above steps \ngit remote -v\n should give following output\n\n\n\n\nAshishs-MacBook-Pro:srijan_dev_docs ashish$ git remote -v\norigin  git@github.com:AshishThakur/srijan_dev_docs.git (fetch)\norigin  git@github.com:AshishThakur/srijan_dev_docs.git (push)\nupstream        git@github.com:srijanaravali/srijan_dev_docs.git (fetch)\nupstream        git@github.com:srijanaravali/srijan_dev_docs.git (push)\n\n\n\n\nNote above my forked repo is named as \norigin\n and the srijanaravali/srijan_dev_docs is named as \nupstream\n\n\n\n\nAssuming your are working on the ticket number as specified in \nBranch name conventions\n, checkout to the base branch (taking dev as an example in this document, some teams might have sprint based base branches). It is important to checkout to base\nbranch while you create a new feature branch. \ngit checkout dev\n\n\nCreate the feature branch \ngit checkout -b dev-123-logo-authenticated-users-for-org\n\n\nFinish the task locally and make sure to unit test everything on local and save the code in local repo.\n\n\nPull the changes from upstream \ngit pull --rebase upstream dev\n. Traditional \ngit pull\n creates a merge commit, hence to avoid this \ngit pull --rebase\n is recommended.\n\n\nFix the conflicts in case any.\n\n\nPush the feature branch to origin.\n\n\nRaise a pull request from your forked (origin)repo's feature branch to upstream's dev branch.\n\n\n\n\n\n\n\nYour team would review your code, please fix those changes and push the changes to the feature branch. Please note guidelines as described in \nGit commit messages\n have to followed for your commit messages. Avoid commit messages like \ngit commit -m \"fixed as per feeback\"\n instead use amend or squash to keep the commit messages clean.\n\n\n\n\nGit Workflow 2\n\n\nArchitecture\n\n\n\n\nEach project would have an upstream repository hosted on Srijan account.\n\n\nhttps://github.com/srijanaravali/srijan_dev_docs\n is an example of remote which we would be using as an example in this document.\n\n\nIn this workflow you are not required to create the fork, you would maintain a single remote and name it origin.\n\n\n\n\nSteps\n\n\n\n\nClone the repo: \ngit clone git@github.com:srijanaravali/srijan_dev_docs.git\n\n\nCheckout to the base branch: \ngit checkout dev\n (dev is considered as a base branch in this example)\n\n\nCreate the feature branch: \ngit checkout -b dev-123-logo-authenticated-users-for-org\n (It is important to checkout to dev branch or your base branch before creating your feature branch)\n\n\nFinish your work locally and make sure to same commit messages guidelines as in Git Workflow 1\n\n\nRebase your work with your base branch: \ngit pull --rebase origin dev\n. This is important before your push your feature branch\n\n\nPush your feature branch: \ngit push origin dev-123-logo-authenticated-users-for-org\n\n\nRaise a Pull Request to the base branch\n\n\n\nYour team would review your code, please fix those changes and push the changes to the feature branch. Please note guidelines as described in \nGit commit messages\n have to followed for your commit messages. Avoid commit messages like \ngit commit -m \"fixed as per feeback\"\n instead use amend or squash to keep the commit messages clean.\n\n\n\n\nOther important points to consinder", 
            "title": "Git Workflow"
        }, 
        {
            "location": "/git/#git-workflow", 
            "text": "", 
            "title": "Git Workflow"
        }, 
        {
            "location": "/git/#introduction", 
            "text": "This document highlights Git workflow which team at Srijan should use. It also contains conventions for naming\nbranches and remotes. We will introduce two workflows in this document. It is suggested to use the Workflow 1\n(Github's fork based workflow) unless there is a special need to use Workflow 2.", 
            "title": "Introduction"
        }, 
        {
            "location": "/git/#branch-name-conventions", 
            "text": "Both the workflow would follow per feature branch branching concept, so it is crucial to follow a similar branching\nname convention.  It is assumed that your project uses some ticketing tool(Jira etc) to run sprints and each team member is assigned\ntickets in the sprint to develop/fix. Since we would be following per feature branch which should follow following\nnaming convetion and please use lowercase to name your feature branches.  ticket-number - description-of-the-ticket   Example   Ticket no. Assigned: Dev-123  User story: As an authenticated user I should be able to view my organization's logo instead of site logo when I\nnavigate to my organization page.   Considering the above example the branch name could be  dev-123-logo-authenticated-users-for-org", 
            "title": "Branch name conventions"
        }, 
        {
            "location": "/git/#git-commit-messages", 
            "text": "Start your git commit message with the ticket number of the feature you are working. Example ```Dev-123: added template\nfor logo\"  Git commit messages should highlight the work which you are saving in that particular commit. Please avoid generic\ncommit messages like \"added css\"  Git commit messages should not contain any typos  Use  git commit --amend  in case you want to add/modify something to your last commit  Refer  for more  In case your commit message does not follow above points it is likely that the pull request might get rejected and you\nmight have to make changes in your commit messages. Please read  this \nto understand the process of changing git commit messages", 
            "title": "Git commit messages"
        }, 
        {
            "location": "/git/#git-workflows", 
            "text": "", 
            "title": "Git Workflows"
        }, 
        {
            "location": "/git/#git-workflow-1", 
            "text": "", 
            "title": "Git Workflow 1"
        }, 
        {
            "location": "/git/#architecture", 
            "text": "Each project would have an upstream repository hosted on Srijan account.  https://github.com/srijanaravali/srijan_dev_docs  is an example of upstream remote which we would be using as an example in this document.", 
            "title": "Architecture"
        }, 
        {
            "location": "/git/#steps", 
            "text": "Create a fork  This would create(clone) the upstream repo to your personal github account  Clone the forked repo  git clone git@github.com:AshishThakur/srijan_dev_docs.git  Add upstream repo as a new remote named upstream  git remote add upstream git@github.com:srijanaravali/srijan_dev_docs.git  It is important to follow similar conventions; while you clone your repo needs to be named as  origin  and the srijan repo needs\nto be added a new remote named  upstream . In case you have confusions regarding remote, please read about how remotes work in git.  In case you have correctly followed the above steps  git remote -v  should give following output   Ashishs-MacBook-Pro:srijan_dev_docs ashish$ git remote -v\norigin  git@github.com:AshishThakur/srijan_dev_docs.git (fetch)\norigin  git@github.com:AshishThakur/srijan_dev_docs.git (push)\nupstream        git@github.com:srijanaravali/srijan_dev_docs.git (fetch)\nupstream        git@github.com:srijanaravali/srijan_dev_docs.git (push)  Note above my forked repo is named as  origin  and the srijanaravali/srijan_dev_docs is named as  upstream   Assuming your are working on the ticket number as specified in  Branch name conventions , checkout to the base branch (taking dev as an example in this document, some teams might have sprint based base branches). It is important to checkout to base\nbranch while you create a new feature branch.  git checkout dev  Create the feature branch  git checkout -b dev-123-logo-authenticated-users-for-org  Finish the task locally and make sure to unit test everything on local and save the code in local repo.  Pull the changes from upstream  git pull --rebase upstream dev . Traditional  git pull  creates a merge commit, hence to avoid this  git pull --rebase  is recommended.  Fix the conflicts in case any.  Push the feature branch to origin.  Raise a pull request from your forked (origin)repo's feature branch to upstream's dev branch.    Your team would review your code, please fix those changes and push the changes to the feature branch. Please note guidelines as described in  Git commit messages  have to followed for your commit messages. Avoid commit messages like  git commit -m \"fixed as per feeback\"  instead use amend or squash to keep the commit messages clean.", 
            "title": "Steps"
        }, 
        {
            "location": "/git/#git-workflow-2", 
            "text": "", 
            "title": "Git Workflow 2"
        }, 
        {
            "location": "/git/#architecture_1", 
            "text": "Each project would have an upstream repository hosted on Srijan account.  https://github.com/srijanaravali/srijan_dev_docs  is an example of remote which we would be using as an example in this document.  In this workflow you are not required to create the fork, you would maintain a single remote and name it origin.", 
            "title": "Architecture"
        }, 
        {
            "location": "/git/#steps_1", 
            "text": "Clone the repo:  git clone git@github.com:srijanaravali/srijan_dev_docs.git  Checkout to the base branch:  git checkout dev  (dev is considered as a base branch in this example)  Create the feature branch:  git checkout -b dev-123-logo-authenticated-users-for-org  (It is important to checkout to dev branch or your base branch before creating your feature branch)  Finish your work locally and make sure to same commit messages guidelines as in Git Workflow 1  Rebase your work with your base branch:  git pull --rebase origin dev . This is important before your push your feature branch  Push your feature branch:  git push origin dev-123-logo-authenticated-users-for-org  Raise a Pull Request to the base branch  Your team would review your code, please fix those changes and push the changes to the feature branch. Please note guidelines as described in  Git commit messages  have to followed for your commit messages. Avoid commit messages like  git commit -m \"fixed as per feeback\"  instead use amend or squash to keep the commit messages clean.", 
            "title": "Steps"
        }, 
        {
            "location": "/git/#other-important-points-to-consinder", 
            "text": "", 
            "title": "Other important points to consinder"
        }, 
        {
            "location": "/drupal/features_module/", 
            "text": "Feature Guidelines\n\n\nAll the projects should use \nFeatures\n Module for deployment. All the team members should go through \n\nDrupal Deployment with Features and Drush Series\n from Drupalize.me.\n\n\nDos and Don'ts with Features.\n\n\n\n\nFeature module is not for porting your configurations from one instance to other but to bundle up your functionality/feature.\n\n\nEverytime you create new feature think it like any other custom/contrib module which is in place to serve specific functionality.\n\n\nThe way you build features is depends on agreement of your team. The most important thing is the complete team follow the same guidliness, its very important to discuss feature architecture with in team before you start a project.\n\n\nThe best way to decide what a feature will have is to look around configurations for specific set of functionalities. Consider this with an example: You want to have image carousel on your sight, so what we do is create a content type called Image Slider, Install views module Install silder display plugin, create view, create image cache. So basically all of these configuration build one feature \"Carousel\". This makes this complete bundle of functionalities to go in one feature which you even install  on vanilla drupal gives you all you want to start with.\n\n\nFeatures should be independent of each other, so if they are created of specific set of functionality there is less chance of ending up of dependencies.\n\n\nIts good to have multiple features broken into small set of standalone functionalties rather than one mamoth feature. A feature with lot of configuration is really hard to maintain and also it creates chances to wipe configuration and hence \nclient data\n.\n\n\nIts important to maintain your features in default state, otherwise features which are not updated for long can cause loss of data and configuration.\n\n\nFeatures are never supposed to get direct deployed on production, they always need a prior testing. So workflow could be create feature on your local and deploy it to dev, get it tested and then move it to stg/prod.\n\n\nAlways think twice before you decide to revert or recreate feature, revert will update your database to match with your codebase and recreate/update will update your codebase as per your database configurations.\n\n\nWhile reverting a feature make sure you are not deleting important configuration. \nFeature Diff\n is a good module to see the difference in feature code and what is there in database.\n\n\nAlways make sure you take latest feature codebase before you are updating it.\n\n\nGit helps a lot in making sure we are not overring someone else configuration via feature, always look at git diff on your features file if multiple people working on same project.\n\n\nAlways create a base field feature which helps a lot in keeping base settings and instance settings of fields at two places and hence less chances of overriding one module because of other. \nGood Read\n.\n\n\n\n\nWhat should go inside a feature\n\n\n\n\nLess is more in case of feature.\n\n\nThe bare minimum. Do not get the configurations you get out of the box, for example we are not supposed to pull a body field in content type as this is what Drupal gives out of the box, soon you install the feature which if creates a content type, body field will create by itself, it does not need to be part of features.\n\n\nSo if we are exporting a content type with features settings like create/edit/comment permission, comment settings, publishing settings should only go inside a feature if you are configuring it what the drupal does not give by defaul, else no need to get the things in feature what drupal gives by default.\n\n\n\n\n\n\nNaming Conventions\n\n\n\n\nAll features should be saved to /sites/all/modules/features/\n\n\nAll features should be prefixed with \n when being named\n\n\nFeatures should be named appropriate to what they are. Take example of feature mentioned above about image_slider, so if we are workign on project called test so our feature name could be test_image_slider. Now catch is if you are building a feature which is generic enough to be reused in other projects than do not prefix feature module with project name, so all such generaised and resusable feature module might start with \"feature_\" itself, in our case it would be \"feature_image_silder\".\n\n\n\n\nResources\n\n\n\n\nslides.com/arpitrastogi/agenda\n\n\nhttps://www.phase2technology.com/blog/new-field-bases-and-instances-in-features/", 
            "title": "Using Features Module"
        }, 
        {
            "location": "/drupal/features_module/#feature-guidelines", 
            "text": "All the projects should use  Features  Module for deployment. All the team members should go through  Drupal Deployment with Features and Drush Series  from Drupalize.me.", 
            "title": "Feature Guidelines"
        }, 
        {
            "location": "/drupal/features_module/#dos-and-donts-with-features", 
            "text": "Feature module is not for porting your configurations from one instance to other but to bundle up your functionality/feature.  Everytime you create new feature think it like any other custom/contrib module which is in place to serve specific functionality.  The way you build features is depends on agreement of your team. The most important thing is the complete team follow the same guidliness, its very important to discuss feature architecture with in team before you start a project.  The best way to decide what a feature will have is to look around configurations for specific set of functionalities. Consider this with an example: You want to have image carousel on your sight, so what we do is create a content type called Image Slider, Install views module Install silder display plugin, create view, create image cache. So basically all of these configuration build one feature \"Carousel\". This makes this complete bundle of functionalities to go in one feature which you even install  on vanilla drupal gives you all you want to start with.  Features should be independent of each other, so if they are created of specific set of functionality there is less chance of ending up of dependencies.  Its good to have multiple features broken into small set of standalone functionalties rather than one mamoth feature. A feature with lot of configuration is really hard to maintain and also it creates chances to wipe configuration and hence  client data .  Its important to maintain your features in default state, otherwise features which are not updated for long can cause loss of data and configuration.  Features are never supposed to get direct deployed on production, they always need a prior testing. So workflow could be create feature on your local and deploy it to dev, get it tested and then move it to stg/prod.  Always think twice before you decide to revert or recreate feature, revert will update your database to match with your codebase and recreate/update will update your codebase as per your database configurations.  While reverting a feature make sure you are not deleting important configuration.  Feature Diff  is a good module to see the difference in feature code and what is there in database.  Always make sure you take latest feature codebase before you are updating it.  Git helps a lot in making sure we are not overring someone else configuration via feature, always look at git diff on your features file if multiple people working on same project.  Always create a base field feature which helps a lot in keeping base settings and instance settings of fields at two places and hence less chances of overriding one module because of other.  Good Read .", 
            "title": "Dos and Don'ts with Features."
        }, 
        {
            "location": "/drupal/features_module/#what-should-go-inside-a-feature", 
            "text": "Less is more in case of feature.  The bare minimum. Do not get the configurations you get out of the box, for example we are not supposed to pull a body field in content type as this is what Drupal gives out of the box, soon you install the feature which if creates a content type, body field will create by itself, it does not need to be part of features.  So if we are exporting a content type with features settings like create/edit/comment permission, comment settings, publishing settings should only go inside a feature if you are configuring it what the drupal does not give by defaul, else no need to get the things in feature what drupal gives by default.", 
            "title": "What should go inside a feature"
        }, 
        {
            "location": "/drupal/features_module/#naming-conventions", 
            "text": "All features should be saved to /sites/all/modules/features/  All features should be prefixed with   when being named  Features should be named appropriate to what they are. Take example of feature mentioned above about image_slider, so if we are workign on project called test so our feature name could be test_image_slider. Now catch is if you are building a feature which is generic enough to be reused in other projects than do not prefix feature module with project name, so all such generaised and resusable feature module might start with \"feature_\" itself, in our case it would be \"feature_image_silder\".", 
            "title": "Naming Conventions"
        }, 
        {
            "location": "/drupal/features_module/#resources", 
            "text": "slides.com/arpitrastogi/agenda  https://www.phase2technology.com/blog/new-field-bases-and-instances-in-features/", 
            "title": "Resources"
        }, 
        {
            "location": "/css/", 
            "text": "Scss Guidelines\n\n\nCommon Guide\n\n\n\n\n\n\nNo Inline CSS, always use external file.\n\n\n\n\n\n\nMinify and gzip css file on production site.\n\n\n\n\n\n\nSeparate each ruleset by a blank line.\n\n\n\n\n\n\nAll CSS rules should have a space after the selector \n colon and a trailing semi-colon.\n\n\n\n\n\n\nNope:\n\n\n  .block\n  {\n  color: red;\n  }\n\n\n\n\nNope:\n\n\n  .block{\n    color:red;\n  }\n\n\n\n\nYup:\n\n\n  .block {\n    color: red;\n  }\n\n\n\n\n\n\n\n\nInclude a space after each comma in comma-separated property or function values.\n\n\n\n\n\n\nUse of BEM selectors instead of camelCase OR other format.\n\n\n\n\n\n\nNope:\n\n\n  .blockSearch\n\n\n\n\nYup:\n\n\n  .block--search\n\n\n\n\n\n\nDon't use unit if value is 0.\n\n\n\n\nNope:\n\n\n  width: 0px;\n\n\n\n\nYup:\n\n\n  width: 0;\n\n\n\n\n\n\nNever display trailing zeros.\n\n\n\n\nNope:\n\n\npadding: 0.5em;\n\n\n\n\nYup:\n\n\npadding: .5em;\n\n\n\n\n\n\nDon't over qualify class or ID selectors. Leads to specificity issues further down the line.\n\n\n\n\nNope:\n\n\ndiv.block\n\n\n\n\nYup:\n\n\n.block\n\n\n\n\n\n\nQuote attribute values in selectors.\n\n\n\n\ninput[type=\ncheckbox\n]\n\n\n\n\n\n\n\n\nUse Icon fonts where possible otherwise use sprites for images.\n\n\n\n\n\n\nDon't use \n!important\n reactively. But it is okay to use \n!important\n on helper classes only. To add \n!important\n pre-emptively is fine, e.g. \n.error { color:red!important }\n, as you know you will always want this rule to take precedence.\n\n\n\n\n\n\nUse single quotes '' for strings.\n\n\n\n\n\n\nNope:\n\n\n  font-family: Helvetica Neue Light, Helvetica, Arial, sans-serif;\n  background-image: url(/images/kittens.jpg);\n\n\n\n\nYup:\n\n\n  font-family: 'Helvetica Neue Light', 'Helvetica', 'Arial', sans-serif;\n  background-image: url('/images/kittens.jpg');\n\n\n\n\nSass Guide\n\n\n\n\nUse Scss syntax not sass.\n\n\n\n\nNope:\n\n\n  .block\n    color: red;\n\n\n\n\nYup:\n\n\n  .block {\n    color: red;\n  }\n\n\n\n\n\n\nDon't over nest selectors.\n\n\n\n\nNope:\n\n\n  .menu {\n    .menu__item {\n      .menu__link {\n        // something...\n        }\n      }\n    }\n  }\n\n\n\n\nYup:\n\n\n  .menu {\n    .menu__item {\n      // something...\n    }\n    .menu__link {\n      // something...\n    }\n  }\n\n\n\n\n\n\nUse variable names in a format.\n\n\n\n\nNope:\n\n\n  $header-bg-color: red;\n  $menu-link-color: green;\n  $footer-link-color: blue;\n\n\n\n\nYup:\n\n\n  $color-header-bg: red;\n  $color-link-color: green;\n  $color-footer-link: blue;\n\n\n\n\n\n\nTop-level numeric calculations should always be wrapped in parentheses.\n\n\n\n\nNope:\n\n\n  width: 100% / 3;\n\n\n\n\nYup:\n\n\n  width: (100% / 3);\n\n\n\n\nArchitecture of Sass directory structure\n\n\nsass/\n|\n|\u2013 abstracts/\n|   |\u2013 _variables.scss    # Sass Variables\n|   |\u2013 _functions.scss    # Sass Functions\n|   |\u2013 _mixins.scss       # Sass Mixins\n|   |\u2013 _utilities.scss    # Sass Placeholders/Utility Classes\n|\n|\u2013 vendors/\n|   |\u2013 _bootstrap.scss    # Bootstrap\n|   |\u2013 _jquery-ui.scss    # jQuery UI\n|   \u2026                     # Etc.\n|\n|\u2013 base/\n|   |\u2013 _reset.scss        # Reset/normalize\n|   |\u2013 _typography.scss   # Typography rules\n|   \u2026                     # Etc.\n|\n|\u2013 components/\n|   |\u2013 _buttons.scss      # Buttons\n|   |\u2013 _carousel.scss     # Carousel\n|   |\u2013 _cover.scss        # Cover\n|   |\u2013 _dropdown.scss     # Dropdown\n|   \u2026                     # Etc.\n|\n|\u2013 layout/\n|   |\u2013 _navigation.scss   # Navigation\n|   |\u2013 _grid.scss         # Grid system\n|   |\u2013 _header.scss       # Header\n|   |\u2013 _footer.scss       # Footer\n|   |\u2013 _sidebar.scss      # Sidebar\n|   |\u2013 _forms.scss        # Forms\n|   \u2026                     # Etc.\n|\n|\u2013 pages/\n|   |\u2013 _home.scss         # Home specific styles\n|   |\u2013 _contact.scss      # Contact specific styles\n|   \u2026                     # Etc.\n|\n|\u2013 themes/\n|   |\u2013 _theme.scss        # Default theme\n|   |\u2013 _admin.scss        # Admin theme\n|   \u2026                     # Etc.\n|\n`\u2013 main.scss              # Main Sass file", 
            "title": "CSS"
        }, 
        {
            "location": "/css/#scss-guidelines", 
            "text": "", 
            "title": "Scss Guidelines"
        }, 
        {
            "location": "/css/#common-guide", 
            "text": "No Inline CSS, always use external file.    Minify and gzip css file on production site.    Separate each ruleset by a blank line.    All CSS rules should have a space after the selector   colon and a trailing semi-colon.    Nope:    .block\n  {\n  color: red;\n  }  Nope:    .block{\n    color:red;\n  }  Yup:    .block {\n    color: red;\n  }    Include a space after each comma in comma-separated property or function values.    Use of BEM selectors instead of camelCase OR other format.    Nope:    .blockSearch  Yup:    .block--search   Don't use unit if value is 0.   Nope:    width: 0px;  Yup:    width: 0;   Never display trailing zeros.   Nope:  padding: 0.5em;  Yup:  padding: .5em;   Don't over qualify class or ID selectors. Leads to specificity issues further down the line.   Nope:  div.block  Yup:  .block   Quote attribute values in selectors.   input[type= checkbox ]    Use Icon fonts where possible otherwise use sprites for images.    Don't use  !important  reactively. But it is okay to use  !important  on helper classes only. To add  !important  pre-emptively is fine, e.g.  .error { color:red!important } , as you know you will always want this rule to take precedence.    Use single quotes '' for strings.    Nope:    font-family: Helvetica Neue Light, Helvetica, Arial, sans-serif;\n  background-image: url(/images/kittens.jpg);  Yup:    font-family: 'Helvetica Neue Light', 'Helvetica', 'Arial', sans-serif;\n  background-image: url('/images/kittens.jpg');", 
            "title": "Common Guide"
        }, 
        {
            "location": "/css/#sass-guide", 
            "text": "Use Scss syntax not sass.   Nope:    .block\n    color: red;  Yup:    .block {\n    color: red;\n  }   Don't over nest selectors.   Nope:    .menu {\n    .menu__item {\n      .menu__link {\n        // something...\n        }\n      }\n    }\n  }  Yup:    .menu {\n    .menu__item {\n      // something...\n    }\n    .menu__link {\n      // something...\n    }\n  }   Use variable names in a format.   Nope:    $header-bg-color: red;\n  $menu-link-color: green;\n  $footer-link-color: blue;  Yup:    $color-header-bg: red;\n  $color-link-color: green;\n  $color-footer-link: blue;   Top-level numeric calculations should always be wrapped in parentheses.   Nope:    width: 100% / 3;  Yup:    width: (100% / 3);", 
            "title": "Sass Guide"
        }, 
        {
            "location": "/css/#architecture-of-sass-directory-structure", 
            "text": "sass/\n|\n|\u2013 abstracts/\n|   |\u2013 _variables.scss    # Sass Variables\n|   |\u2013 _functions.scss    # Sass Functions\n|   |\u2013 _mixins.scss       # Sass Mixins\n|   |\u2013 _utilities.scss    # Sass Placeholders/Utility Classes\n|\n|\u2013 vendors/\n|   |\u2013 _bootstrap.scss    # Bootstrap\n|   |\u2013 _jquery-ui.scss    # jQuery UI\n|   \u2026                     # Etc.\n|\n|\u2013 base/\n|   |\u2013 _reset.scss        # Reset/normalize\n|   |\u2013 _typography.scss   # Typography rules\n|   \u2026                     # Etc.\n|\n|\u2013 components/\n|   |\u2013 _buttons.scss      # Buttons\n|   |\u2013 _carousel.scss     # Carousel\n|   |\u2013 _cover.scss        # Cover\n|   |\u2013 _dropdown.scss     # Dropdown\n|   \u2026                     # Etc.\n|\n|\u2013 layout/\n|   |\u2013 _navigation.scss   # Navigation\n|   |\u2013 _grid.scss         # Grid system\n|   |\u2013 _header.scss       # Header\n|   |\u2013 _footer.scss       # Footer\n|   |\u2013 _sidebar.scss      # Sidebar\n|   |\u2013 _forms.scss        # Forms\n|   \u2026                     # Etc.\n|\n|\u2013 pages/\n|   |\u2013 _home.scss         # Home specific styles\n|   |\u2013 _contact.scss      # Contact specific styles\n|   \u2026                     # Etc.\n|\n|\u2013 themes/\n|   |\u2013 _theme.scss        # Default theme\n|   |\u2013 _admin.scss        # Admin theme\n|   \u2026                     # Etc.\n|\n`\u2013 main.scss              # Main Sass file", 
            "title": "Architecture of Sass directory structure"
        }, 
        {
            "location": "/javascript/", 
            "text": "JS Guidelines\n\n\nCommon Guide\n\n\n\n\n\n\nUse single quotes '' for strings.\n\n\n\n\n\n\nNo additional trailing comma in options.\n\n\n\n\n\n\nAlways wrap code with anonymous function.\n\n\n\n\n\n\n(function() {\n\n})();\n\n\n\n\n\n\nAlways use \nvar\n to declare variables. Not doing so will result in global variables.\n\n\n\n\nNope:\n\n\n  x = 'Batman';\n\n\n\n\nYup:\n\n\n  var x = 'Batman';\n\n\n\n\n\n\nPrefix jQuery object variables with a \n$\n.\n\n\n\n\nvar $sidebar = $('.sidebar');\n\n\n\n\n\n\nUse shorthands.\n\n\n\n\nNope:\n\n\nvar selector = jQuery('.sidebar');\nvar obj = new Object();\nvar arr = new Array();\n\n\n\n\nYup:\n\n\nvar selector = $('.sidebar');\nvar obj = {};\nvar arr = [];\n\n\n\n\n\n\nAlways cache DOM selection if you plan to re-use data.\n\n\n\n\nvar $search_form = $('#block-search').find('form');\n\n\n\n\n\n\n\n\nSave reference to \nthis\n as variable too.\n\n\njs\nvar _this = $(this); OR var _this = this;\n\n\n\n\n\n\nAvoid using \n$.each\n for repeated or performance critical functionality. Instead use a \nfor\n loop.\n\n\n\n\n\n\nDrupal JS API\n\n\n\n\nAlways use Drupal.behaviours in Drupal\n\n\n\n\nNope:\n\n\n(function($, Drupal) {\n  $(document).ready(function() {\n\n  });\n})(jQuery, Drupal);\n\n\n\n\nYup:\n\n\n(function($, Drupal) {\n  Drupal.behaviour.behaviour_name = {\n    attach: function (context, settings) {\n\n    }\n  };\n})(jQuery, Drupal);\n\n\n\n\n\n\nUse dot notation when accessing properties.\n\n\n\n\nNope:\n\n\nDrupal.settings['base_url']\n\n\n\n\nYup:\n\n  \njs\nDrupal.settings.base_url\n\n\n\n\nKeep DOM manipulation after page load in theme js.", 
            "title": "JavaScript"
        }, 
        {
            "location": "/javascript/#js-guidelines", 
            "text": "", 
            "title": "JS Guidelines"
        }, 
        {
            "location": "/javascript/#common-guide", 
            "text": "Use single quotes '' for strings.    No additional trailing comma in options.    Always wrap code with anonymous function.    (function() {\n\n})();   Always use  var  to declare variables. Not doing so will result in global variables.   Nope:    x = 'Batman';  Yup:    var x = 'Batman';   Prefix jQuery object variables with a  $ .   var $sidebar = $('.sidebar');   Use shorthands.   Nope:  var selector = jQuery('.sidebar');\nvar obj = new Object();\nvar arr = new Array();  Yup:  var selector = $('.sidebar');\nvar obj = {};\nvar arr = [];   Always cache DOM selection if you plan to re-use data.   var $search_form = $('#block-search').find('form');    Save reference to  this  as variable too.  js\nvar _this = $(this); OR var _this = this;    Avoid using  $.each  for repeated or performance critical functionality. Instead use a  for  loop.", 
            "title": "Common Guide"
        }, 
        {
            "location": "/javascript/#drupal-js-api", 
            "text": "Always use Drupal.behaviours in Drupal   Nope:  (function($, Drupal) {\n  $(document).ready(function() {\n\n  });\n})(jQuery, Drupal);  Yup:  (function($, Drupal) {\n  Drupal.behaviour.behaviour_name = {\n    attach: function (context, settings) {\n\n    }\n  };\n})(jQuery, Drupal);   Use dot notation when accessing properties.   Nope:  Drupal.settings['base_url']  Yup: \n   js\nDrupal.settings.base_url   Keep DOM manipulation after page load in theme js.", 
            "title": "Drupal JS API"
        }, 
        {
            "location": "/templating/", 
            "text": "HTML Guidelines\n\n\n\n\nAlways Check HTML accessibility and semantic. Run code through W3C validator. 100% valid code is not a goal, but validation certainly helps to write more maintainable sites as well as debugging code.\n\n\n\n\na\n should always have `title` attribute.\n\nimg\n should always have `alt` attribute.\n\n\n\n\n\n\n\n\nUse semantic code, don't mimic things with css.\nMenu should always have list elements not \ndiv\n OR \np\n.\n\n\n\n\n\n\nOmit \nProtocol\n and \ntype\n when refering resources in HTML, CSS\n\n\n\n\n\n\nNope:\n\n\nscript src=\nhttp://cdn.google.com/jquery.js\n type=\ntext/javascript\n/script\n\n\n\n\n\nYup:\n\n\nscript src=\n//cdn.google.com/jquery.js\n/script\n\n\n\n\n\n\n\nAll markup should be delivered as UTF-8, as it's the most friendly for internationalization.\n\n\n\n\nmeta charset=\nutf-8\n\n\n\n\n\n\n\nClass names should not be feature driven.\n\n\n\n\ndiv class=\nborder-blue\n/div\n\n\n\n\n\n\n\nDrupal Follows BEM methodology, so we should follow same.\n\n\n\n\ndiv class=\nblock block--social-links\n\n  \nh2 class=\nblock__title\n/h2\n\n  \np class=\nblock__content\n/p\n\n\n/div\n\n\n\n\n\n\n\nPHP should be inline in HTML, not other way.\n\n\n\n\nNope:\n\n\n?php print '\nh2 class=\nnode__title\n' . $node-\ntitle . '\n/h2\n'; ?\n\n\n\n\n\nYup:\n\n\nh2 class=\nnode__title\n?php $node-\ntitle; ?\n/h2", 
            "title": "Templating"
        }, 
        {
            "location": "/templating/#html-guidelines", 
            "text": "Always Check HTML accessibility and semantic. Run code through W3C validator. 100% valid code is not a goal, but validation certainly helps to write more maintainable sites as well as debugging code.   a  should always have `title` attribute. img  should always have `alt` attribute.    Use semantic code, don't mimic things with css.\nMenu should always have list elements not  div  OR  p .    Omit  Protocol  and  type  when refering resources in HTML, CSS    Nope:  script src= http://cdn.google.com/jquery.js  type= text/javascript /script   Yup:  script src= //cdn.google.com/jquery.js /script    All markup should be delivered as UTF-8, as it's the most friendly for internationalization.   meta charset= utf-8    Class names should not be feature driven.   div class= border-blue /div    Drupal Follows BEM methodology, so we should follow same.   div class= block block--social-links \n   h2 class= block__title /h2 \n   p class= block__content /p  /div    PHP should be inline in HTML, not other way.   Nope:  ?php print ' h2 class= node__title ' . $node- title . ' /h2 '; ?   Yup:  h2 class= node__title ?php $node- title; ? /h2", 
            "title": "HTML Guidelines"
        }, 
        {
            "location": "/drupal/drupal_standards/", 
            "text": "Drupal Guidelines\n\n\n\n\nModules\n\n\nDrupal 7\n  * Custom Modules\n    * sites/all/modules/custom\n  * Contrib Modules\n     * sites/all/modules/contrib\n  * Features\n     * sites/all/modules/features\n\n\n\n\n\n\nPatches\n\n\n\n\nsites/all/patches\n\n\nIts very important to keep track of all the patches you have used in the project, this helps in long run maintenance of project, later when you do upgrade of Drupal. Keeping all at one place later helps in the upgradation path.\n\n\n\n\n\n\n\n\nTheme\n\n\n\n\nsites/all/themes\n\n\n\n\n\n\n\n\nCustom Module Architecture\n\n\n\n\nMost of times we end up having custom modules which have dependency on each other, which makes it quiet hard to uninstall a module when not needed, which defeats the purpose of building modules, as the name says modules should be modular enough to allow us to switch a functionality on/off with the module status. The important thing is to build to independent modules.\n\n\nAn easy way to maintain custom module could be \n\n\nCreate a library module, role of this module would be to contain all helper functions which includes database queries like get_node_title_by_nid(). Rest of our custom modules will have dependency on library module, but not among each other.", 
            "title": "SiteAudit"
        }, 
        {
            "location": "/drupal/drupal_standards/#drupal-guidelines", 
            "text": "", 
            "title": "Drupal Guidelines"
        }, 
        {
            "location": "/drupal/drupal_standards/#modules", 
            "text": "Drupal 7\n  * Custom Modules\n    * sites/all/modules/custom\n  * Contrib Modules\n     * sites/all/modules/contrib\n  * Features\n     * sites/all/modules/features    Patches   sites/all/patches  Its very important to keep track of all the patches you have used in the project, this helps in long run maintenance of project, later when you do upgrade of Drupal. Keeping all at one place later helps in the upgradation path.     Theme   sites/all/themes", 
            "title": "Modules"
        }, 
        {
            "location": "/drupal/drupal_standards/#custom-module-architecture", 
            "text": "Most of times we end up having custom modules which have dependency on each other, which makes it quiet hard to uninstall a module when not needed, which defeats the purpose of building modules, as the name says modules should be modular enough to allow us to switch a functionality on/off with the module status. The important thing is to build to independent modules.  An easy way to maintain custom module could be   Create a library module, role of this module would be to contain all helper functions which includes database queries like get_node_title_by_nid(). Rest of our custom modules will have dependency on library module, but not among each other.", 
            "title": "Custom Module Architecture"
        }, 
        {
            "location": "/drupal/drupal_standards/", 
            "text": "Drupal Guidelines\n\n\n\n\nModules\n\n\nDrupal 7\n  * Custom Modules\n    * sites/all/modules/custom\n  * Contrib Modules\n     * sites/all/modules/contrib\n  * Features\n     * sites/all/modules/features\n\n\n\n\n\n\nPatches\n\n\n\n\nsites/all/patches\n\n\nIts very important to keep track of all the patches you have used in the project, this helps in long run maintenance of project, later when you do upgrade of Drupal. Keeping all at one place later helps in the upgradation path.\n\n\n\n\n\n\n\n\nTheme\n\n\n\n\nsites/all/themes\n\n\n\n\n\n\n\n\nCustom Module Architecture\n\n\n\n\nMost of times we end up having custom modules which have dependency on each other, which makes it quiet hard to uninstall a module when not needed, which defeats the purpose of building modules, as the name says modules should be modular enough to allow us to switch a functionality on/off with the module status. The important thing is to build to independent modules.\n\n\nAn easy way to maintain custom module could be \n\n\nCreate a library module, role of this module would be to contain all helper functions which includes database queries like get_node_title_by_nid(). Rest of our custom modules will have dependency on library module, but not among each other.", 
            "title": "Drupal Standards"
        }, 
        {
            "location": "/drupal/drupal_standards/#drupal-guidelines", 
            "text": "", 
            "title": "Drupal Guidelines"
        }, 
        {
            "location": "/drupal/drupal_standards/#modules", 
            "text": "Drupal 7\n  * Custom Modules\n    * sites/all/modules/custom\n  * Contrib Modules\n     * sites/all/modules/contrib\n  * Features\n     * sites/all/modules/features    Patches   sites/all/patches  Its very important to keep track of all the patches you have used in the project, this helps in long run maintenance of project, later when you do upgrade of Drupal. Keeping all at one place later helps in the upgradation path.     Theme   sites/all/themes", 
            "title": "Modules"
        }, 
        {
            "location": "/drupal/drupal_standards/#custom-module-architecture", 
            "text": "Most of times we end up having custom modules which have dependency on each other, which makes it quiet hard to uninstall a module when not needed, which defeats the purpose of building modules, as the name says modules should be modular enough to allow us to switch a functionality on/off with the module status. The important thing is to build to independent modules.  An easy way to maintain custom module could be   Create a library module, role of this module would be to contain all helper functions which includes database queries like get_node_title_by_nid(). Rest of our custom modules will have dependency on library module, but not among each other.", 
            "title": "Custom Module Architecture"
        }
    ]
}